package me.samfreeman.java.DataStructures;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.Scanner;

class Sorter implements Comparator<Student> {

	@Override
	public int compare(Student o1, Student o2) {
		System.out.println("sorted");
		if (o2.getCgpa() == o1.getCgpa()) {
			if (o2.getFname().equals(o1.getFname())) {
				return o2.getId() - o1.getId();
			}
			return o1.getFname().compareTo(o2.getFname());
		}
		return (int) (o2.getCgpa() - o1.getCgpa());
	}
}

// Provided Code
class Student {
	private int id;
	private String fname;
	private double cgpa;

	public Student(int id, String fname, double cgpa) {
		super();
		this.id = id;
		this.fname = fname;
		this.cgpa = cgpa;
	}

	public int getId() {
		return id;
	}

	public String getFname() {
		return fname;
	}

	public double getCgpa() {
		return cgpa;
	}
}

// Complete the code
public class JavaSort {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		int testCases = Integer.parseInt(in.nextLine());

		List<Student> studentList = new ArrayList<Student>();
		while (testCases-- > 0) {
			int id = in.nextInt();
			String fname = in.next();
			double cgpa = in.nextDouble();

			Student st = new Student(id, fname, cgpa);
			studentList.add(st);

		}
		Student[] students = studentList.toArray(new Student[studentList.size()]);
		Sorter sorter = new Sorter();
		Arrays.sort(students, sorter);

		for (Student st : students) {
			System.out.println(st.getFname());
		}
	}
}
